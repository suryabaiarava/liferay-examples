{
  "_args": [
    [
      {
        "raw": "gogo-shell@https://registry.npmjs.org/gogo-shell/-/gogo-shell-0.0.5.tgz",
        "scope": null,
        "escapedName": "gogo-shell",
        "name": "gogo-shell",
        "rawSpec": "https://registry.npmjs.org/gogo-shell/-/gogo-shell-0.0.5.tgz",
        "spec": "https://registry.npmjs.org/gogo-shell/-/gogo-shell-0.0.5.tgz",
        "type": "remote"
      },
      "D:\\Liferay7\\PA-WORKSPACE\\patient-alliance-theme\\node_modules\\liferay-theme-tasks"
    ]
  ],
  "_from": "gogo-shell@*",
  "_id": "gogo-shell@0.0.5",
  "_inCache": true,
  "_location": "/liferay-theme-tasks/gogo-shell",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gogo-shell@https://registry.npmjs.org/gogo-shell/-/gogo-shell-0.0.5.tgz",
    "scope": null,
    "escapedName": "gogo-shell",
    "name": "gogo-shell",
    "rawSpec": "https://registry.npmjs.org/gogo-shell/-/gogo-shell-0.0.5.tgz",
    "spec": "https://registry.npmjs.org/gogo-shell/-/gogo-shell-0.0.5.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/liferay-theme-tasks",
    "/liferay-theme-tasks/liferay-plugin-node-tasks"
  ],
  "_resolved": "https://registry.npmjs.org/gogo-shell/-/gogo-shell-0.0.5.tgz",
  "_shasum": "a37539c03bf29b6f637dbbcaf9a4d344f0166707",
  "_shrinkwrap": null,
  "_spec": "gogo-shell@https://registry.npmjs.org/gogo-shell/-/gogo-shell-0.0.5.tgz",
  "_where": "D:\\Liferay7\\PA-WORKSPACE\\patient-alliance-theme\\node_modules\\liferay-theme-tasks",
  "author": {
    "name": "Rob Frampton",
    "email": "rob.g.frampton@gmail.com",
    "url": "https://github.com/Robert-Frampton"
  },
  "bugs": {
    "url": "https://github.com/robert-frampton/node-gogo-shell/issues"
  },
  "dependencies": {
    "bluebird": "^3.3.3",
    "lodash": "^4.6.1"
  },
  "description": "A Node wrapper for sending Gogo commands to an OSGi environment",
  "devDependencies": {
    "chai": "^3.5.0",
    "gulp": "^3.9.1",
    "gulp-coveralls": "^0.1.4",
    "gulp-istanbul": "^0.10.3",
    "gulp-mocha": "^2.2.0",
    "sinon": "^1.17.3"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "homepage": "https://github.com/robert-frampton/node-gogo-shell#readme",
  "keywords": [
    "gogo",
    "osgi",
    "telnet"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "gogo-shell",
  "optionalDependencies": {},
  "readme": "# gogo-shell [![Build Status](https://travis-ci.org/Robert-Frampton/node-gogo-shell.svg?branch=master)](https://travis-ci.org/Robert-Frampton/node-gogo-shell) [![Coverage Status](https://coveralls.io/repos/github/Robert-Frampton/node-gogo-shell/badge.svg?branch=master)](https://coveralls.io/github/Robert-Frampton/node-gogo-shell?branch=master)\n\n> A Node wrapper for sending Gogo commands to an OSGi environment\n\n\n## Install\n\n```\n$ npm install --save gogo-shell\n```\n\n\n## Usage\n\nNote: a Gogo shell must be running before invoking the connect method, otherwise a connection error will be thrown.\n\n```js\nvar GogoShell = require('gogo-shell');\n\nvar gogoShell = new GogoShell();\n\nvar config = {\n    port: 11311\n};\n\ngogoShell.connect(config)\n    .then(function() {\n        return gogoShell.sendCommand('lb');\n    })\n    .then(function(data) {\n        // Do something with response data\n\n        gogoShell.end();\n    });\n```\n\n\n## API\n\nGogoShell is an instance of [net.Socket](https://nodejs.org/api/net.html#net_class_net_socket) and inherits all it's properties, methods, and events.\n\n### new GogoShell([options])\n\n#### options\n\nType: `object`\n\nThe `GogoShell` constructor can also be passed the same configuration options as the [net.Socket constructor](https://nodejs.org/api/net.html#net_new_net_socket_options).\n\n##### debug\n\ntype: `boolean`<br>\n\nIf set to true, prints all commands sent to the server, and all response data from the server to stdout.\n\n#### examples\n\n```js\nvar GogoShell = require('gogo-shell');\n\nvar gogoShell = new GogoShell({\n    debug: true\n});\n```\n\n### connect([options])\n\nConnects to a TCP server which allows you to send Gogo commands to an OSGi environment. Returns a Promise which resolves when the server is ready to receive commands.\n\n#### options\n\nType: `object`\n\n##### host\n\nType: `string`<br>\nDefault: `127.0.0.1`\n\n##### port\n\nType: `number`<br>\nRequired: `true`\n\nSee [socket.connect](https://nodejs.org/api/net.html#net_socket_connect_options_connectlistener) method for other options and their default values.\n\n#### examples\n\n```js\nvar GogoShell = require('gogo-shell');\n\nvar gogoShell = new GogoShell();\n\nvar config = {\n    port: 11311\n};\n\ngogoShell.connect(config)\n    .then(function() {\n        // gogoShell.sendCommand(...);\n    });\n```\n\n\n### help([command])\n\nReturns Promise that resolves with array of available commands, or object literal containing information on specified command.\n\n##### command\n\nType: `string`\n\nThe Gogo command to retieve help info for.\n\n#### examples\n\n```js\ngogoShell.help()\n    .then(function(data) {\n        // data = array of available commands\n    });\n```\n\n```js\ngogoShell.help('install')\n    .then(function(data) {\n        // data = object literal containing api information for specified command\n    });\n```\n\n\n### sendCommand(command, [options])\n\nSends Gogo command to an OSGi environment. Returns a Promise that resolves with the response data.\n\n##### command\n\nType: `string`\n\nThe Gogo command that will be sent to the OSGi environment.\n\n##### options\n\nType: `string`\n\nAdditional parameters, flags, and options that will be joined with the command argument.\n\n#### examples\n\n```js\ngogoShell.sendCommand('lb', '-s')\n    .then(function(data) {\n        // data = list of installed bundles with symbolic name\n    });\n```\n\nChaining commands.\n\n```js\nvar GogoShell = require('gogo-shell');\n\nvar gogoShell = new GogoShell();\n\nvar config = {\n    port: 11311\n};\n\ngogoShell.connect(config)\n    .then(function() {\n        return gogoShell.sendCommand('lb');\n    })\n    .then(function(data) {\n        // data = response from 'lb'\n\n        return gogoShell.sendCommand('another command');\n    })\n    .then(function(data) {\n        // data = response from 'another command'\n\n        // Using socket.end for closing connection, otherwise Node process wouldn't end\n        gogoShell.end();\n    });\n```\n\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/robert-frampton/node-gogo-shell.git"
  },
  "scripts": {
    "coveralls": "gulp coveralls",
    "test": "gulp test"
  },
  "version": "0.0.5"
}
